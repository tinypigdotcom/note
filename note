#!/usr/bin/perl
# purpose: quickly store and retrieve small pieces of information

#    Copyright (C) 2016  David M. Bradford
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your u_option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see https://www.gnu.org/licenses/gpl.txt
#
#    The author, David M. Bradford, can be contacted at:
#    davembradford@gmail.com

# TODO

# MAYBE TODO
# * implement tags
# * implement delete entry
# * implement edit individual entry
# * allow input from file

# DONE
# * implement "library" like notebook in evernote (sort of)
# * Implement word option
# * allow for title search

use strict;
use warnings FATAL => 'all';

BEGIN { $| = 1 }

use lib 'lib';
use App::Notes;

use Clipboard;
use Data::Dumper;
use File::Basename;
use File::Basename;
use Getopt::Long;
use Getopt::Long;
use IO::File;

our $VERSION = '0.11.0';

my $PROG = basename($0);
my $ERR_EXIT = 2;

sub usage_top {
    warn "Usage: $PROG [OPTION]... PATTERN..\n";
}

sub short_usage {
    usage_top();
    warn "Try '$PROG --help' for more information.\n";
}

sub errout {
    my $message = join( ' ', @_ );
    warn "$PROG: $message\n";
    short_usage();
    exit $ERR_EXIT;
}

sub usage {
    usage_top();
    warn <<EOF;
quickly store and retrieve small pieces of information
Example: $PROG -w lawnmower

  -h, --help            display this help text and exit
  -v, --version         display version information and exit
  -f, --file=FILE       Search a specific file
  -l, --library=LIBRARY Search a specific library
  -a, --add             add a note
  -e, --edit            edit the notes file
  -t, --title           search title only
  -V, --Verbose         show additional information about entries matched / not
                        matched
  -w, --word            only find if PATTERN is a word

EOF
    return;
}

sub do_short_usage {
    short_usage();
    exit $ERR_EXIT;
}

sub version {
    warn "$PROG $VERSION\n";
    return;
}

my $h                = 0;
my $help             = 0;
my $version          = 0;
my $file             = '';
my $library          = '';
my $add              = 0;
my $edit             = 0;
my $title            = 0;
my $Verbose          = 0;
my $word             = 0;

Getopt::Long::Configure ("bundling");

my %options = (
    "help"           => \$help,
    "version"        => \$version,
    "file=s"         => \$file,
    "library=s"      => \$library,
    "add"            => \$add,
    "edit"           => \$edit,
    "title"          => \$title,
    "Verbose"        => \$Verbose,
    "word"           => \$word,

);

# Explicitly add single letter version of each option to allow bundling
my ($key, $value);
my %temp = %options;
while (($key,$value) = each %temp) {
    my $letter = $key;
    $letter =~ s/(\w)\w*/$1/;
    $options{$letter} = $value;
}
# Fix-ups from previous routine
$options{h} = \$h;

GetOptions(%options) or errout("Error in command line arguments");

if    ($help)     { usage(); exit    }
elsif ($h)        { do_short_usage() }
elsif ($version)  { version(); exit  }

my $nf = $ENV{NOTEFILES} || "$ENV{HOME}/.notes";
my @notefiles = split ':', $nf;

sub main {
    my (@patterns) = @_;

    my $app_note = App::Notes->new(
        file         => $file,
        library      => $library,
        title        => $title,
        Verbose      => $Verbose,
        word         => $word,
        autoprint    => 1,
    );
    if    ($add)      { return $app_note->add_note() }
    elsif ($edit)     { return $app_note->edit_notes() }
    elsif (@patterns) { return $app_note->search_note(@patterns) }
    else              { return $app_note->do_short_usage() }

    die "Boom.";    # This code should never be reached
    return;
}

my $rc = ( main(@ARGV) || 0 );

exit $rc;

